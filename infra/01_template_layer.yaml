Description: "Load balancer template"
Parameters:
  pNumberFargateInstances:
    Description: Number of fargate instances
    Type: Number
    Default: 1
  pDatabaseUser:
    Description: Username used for accessing database
    Type: String
    Default: node
  pEnableExecute:
    Description: Enable access to FARGATE containers
    Type: String
    Default: true
    AllowedValues:
      - true
      - false


  pHostedZoneId:
    Description: Hosted zone id for route53 association
    Type: String
    Default: Z05711693JWUSZY3QSZ10

  pDNSName:
    Description: DNS name
    Type: String
    Default: dmitri.sandbox.soluzionifutura.it

  pRepoOwner:
    Description: Repo Owner
    Type: String
    Default: kanopo
  pRepoName:
    Description: Repo Name
    Type: String
    Default: gcd
  pBranchName:
    Description: source branch
    Type: String
    Default: main


  pBaseECR:
    Description: ECR URL
    Type: String
    Default: 861507897222.dkr.ecr.eu-north-1.amazonaws.com

  pRepoECR:
    Description: ECR repo
    Type: String
    Default: dmitri-node-clean
  

Conditions:
  dnsName: !Equals
    - !Ref pBranchName
    - "main"
Resources:
  KMSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: Key used for encrypt and decrypt s3 buckets and rds dbs in this cloudformation stack
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy: 
        {
        "Id": "key-consolepolicy-3",
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "Enable IAM User Permissions",
                "Effect": "Allow",
                "Principal": {
                    "AWS": "arn:aws:iam::861507897222:root"
                },
                "Action": "kms:*",
                "Resource": "*"
            },
            {
                "Sid": "Allow access for Key Administrators",
                "Effect": "Allow",
                "Principal": {
                    "AWS": "arn:aws:iam::861507897222:role/ecsTaskExecutionRole"
                },
                "Action": [
                    "kms:Create*",
                    "kms:Describe*",
                    "kms:Enable*",
                    "kms:List*",
                    "kms:Put*",
                    "kms:Update*",
                    "kms:Revoke*",
                    "kms:Disable*",
                    "kms:Get*",
                    "kms:Delete*",
                    "kms:TagResource",
                    "kms:UntagResource",
                    "kms:ScheduleKeyDeletion",
                    "kms:CancelKeyDeletion"
                ],
                "Resource": "*"
            },
            {
                "Sid": "Allow use of the key",
                "Effect": "Allow",
                "Principal": {
                    "AWS": "arn:aws:iam::861507897222:role/ecsTaskExecutionRole"
                },
                "Action": [
                    "kms:Encrypt",
                    "kms:Decrypt",
                    "kms:ReEncrypt*",
                    "kms:GenerateDataKey*",
                    "kms:DescribeKey"
                ],
                "Resource": "*"
            },
            {
                "Sid": "Allow attachment of persistent resources",
                "Effect": "Allow",
                "Principal": {
                    "AWS": "arn:aws:iam::861507897222:role/ecsTaskExecutionRole"
                },
                "Action": [
                    "kms:CreateGrant",
                    "kms:ListGrants",
                    "kms:RevokeGrant"
                ],
                "Resource": "*",
                "Condition": {
                    "Bool": {
                        "kms:GrantIsForAWSResource": "true"
                    }
                }
            }
          ]
        }
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT 


  SGLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow access to load balancer from ports 80 and 443
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      VpcId: 
        Fn::ImportValue: !Sub dmitri-vpc

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref SGLoadBalancer
      Subnets: 
        - Fn::ImportValue: !Sub dmitri-public-subnet-01
        - Fn::ImportValue: !Sub dmitri-public-subnet-02



  ALBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301" 
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP


  ALBListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref HTTPSCertificate
  
  HTTPSCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !If
        - dnsName
        - !Ref pDNSName
        - !Join [".", [!Ref pBranchName, !Ref pDNSName]]
      ValidationMethod: DNS


  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref pHostedZoneId
      Name: !If
        - dnsName
        - !Ref pDNSName
        - !Join [".", [!Ref pBranchName, !Ref pDNSName]]
      ResourceRecords:
      - !GetAtt ALB.DNSName
      TTL: 900
      Type: CNAME

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      IpAddressType: ipv4
      Port: 3000
      Protocol: HTTP 
      ProtocolVersion: HTTP1
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub dmitri-vpc

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders: 
        - FARGATE
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled

    DependsOn: ALB


  # ECR:
  #   Type: AWS::ECR::Repository
  #   Properties: 
  #     RepositoryName:
  #       !Join
  #         - "-"
  #         - - !Ref pRepoName
  #           - !Ref pBranchName


  # CleanECR:
  #   Type: Custom::cleanECR
  #   Properties: 
  #     ServiceToken: !GetAtt LFCleanECR.Arn
  #     ECRName: !Ref ECR
  #     Region: !Ref AWS::Region

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: arn:aws:iam::861507897222:role/ecsTaskExecutionRole
      # WARN: need to created the following role inside the template
      TaskRoleArn: arn:aws:iam::861507897222:role/dmitriEcsAccessS3 
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Image: !Join
          - "/"
          - - !Ref pBaseECR
            - !Ref pRepoECR
          Name: dmitri-task-definition-cf
          PortMappings:
            - AppProtocol: http
              ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
            - AppProtocol: http
              ContainerPort: 22
              HostPort: 22
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: 3000
            - Name: BUCKET_REGION
              Value: !Ref AWS::Region

          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-group": "node-ecs"
              "awslogs-region": !Ref AWS::Region
              "awslogs-create-group": "true"
              "awslogs-stream-prefix": "dmitri"



  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener443
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref pNumberFargateInstances
      LaunchType: FARGATE
      EnableExecuteCommand: !Ref pEnableExecute
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - Fn::ImportValue: !Sub dmitri-sg-fargate-container 
          Subnets: 
            - Fn::ImportValue: !Sub dmitri-private-subnet-01
            - Fn::ImportValue: !Sub dmitri-private-subnet-02
      LoadBalancers:
        - ContainerName: dmitri-task-definition-cf
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref ECSTaskDefinition


  ArtifactStoreBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KMSKey.Arn
              SSEAlgorithm: aws:kms

  CleanArtifactBucket:
    Type: Custom::cleanBucket
    Properties: 
      ServiceToken: !GetAtt LFCleanBucket.Arn
      BucketName: !Ref ArtifactStoreBucket
      Region: !Ref AWS::Region


  LFCleanBucket:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require("cfn-response")
          const { S3Client, ListObjectsCommand, DeleteObjectsCommand } = require("@aws-sdk/client-s3");

          const send = (event, context, responseStatus, responseData, physicalResourceId) => {
            return new Promise((resolve) => {
              const done = context.done
              context.done = (event, context, responseStatus, responseData, physicalResourceId) => {
                resolve(done(event, context, responseStatus, responseData, physicalResourceId))
              }
              response.send(event, context, responseStatus, responseData, physicalResourceId)
            })
          }

          exports.handler = async (event, context) => {
            setTimeout(async (event, context) => {
              console.log("TIMEOUT")
              return await send(event, context, "FAILED", {
                body: "Lambda timeouted"
              })
            }, 1000 * 60) // the value is in milliseconds

            if (event.RequestType == "Delete") {
              const bucketName = event.ResourceProperties.BucketName;
              const region = event.ResourceProperties.Region;

              try {
                var s3 = new S3Client({
                  region: region
                })
              } catch (e) {
                console.log(e)
              }

              const listResponse = await s3.send(new ListObjectsCommand({
                Bucket: bucketName,
              }))

              try {

                var keys = listResponse.Contents.map(obj => {
                  return { Key: obj.Key }
                })
              } catch (e) {

                return await send(event, context, response.SUCCESS, {
                  body: "Nothing to delete"
                })
              }
              const deleteResponse = await s3.send(new DeleteObjectsCommand({
                Bucket: bucketName,
                Delete: {
                  Objects: keys
                }
              }))

              return await send(event, context, response.SUCCESS, {
                body: "Deletion completed " + deleteResponse
              })


            } else if (event.RequestType == "Update") {
              return await send(event, context, response.SUCCESS, {
                body: "Update completed"
              })
            } else if (event.RequestType == "Create") {
              return await send(event, context, response.SUCCESS, {
                body: "Create completed"
              })
            }
          }


      KmsKeyArn: !GetAtt KMSKey.Arn
      # WARN: need to created the following role inside the template
      Role: arn:aws:iam::861507897222:role/dmitriLambdaRoleDeleteS3Object 
      Timeout: 60

  # LFCleanECR:
  #     Type: AWS::Lambda::Function
  #     Properties:
  #       Runtime: nodejs18.x
  #       Handler: index.handler
  #       Code:
  #         ZipFile: |
  #           const response = require("cfn-response")
  #           const { ECRClient, BatchDeleteImageCommand, ListImagesCommand } = require("@aws-sdk/client-ecr")
  #
  #           const send = (event, context, responseStatus, responseData, physicalResourceId) => {
  #             return new Promise((resolve) => {
  #               const done = context.done
  #               context.done = (event, context, responseStatus, responseData, physicalResourceId) => {
  #                 resolve(done(event, context, responseStatus, responseData, physicalResourceId))
  #               }
  #               response.send(event, context, responseStatus, responseData, physicalResourceId)
  #             })
  #           }
  #           const getImages = async (client, repositoryName) => {
  #
  #             const imagesResponce = await client.send(new ListImagesCommand({
  #               repositoryName: repositoryName
  #             }))
  #
  #             if (imagesResponce.imageIds.length == 0) {
  #               return []
  #             }
  #             else {
  #               return imagesResponce.imageIds
  #             }
  #           }
  #
  #
  #           const deleteImages = async (client, repositoryName, imageIds) => {
  #             const deleteResponce = await client.send(new BatchDeleteImageCommand({
  #               repositoryName: repositoryName,
  #               imageIds: imageIds
  #             }))
  #
  #             return deleteResponce.metadata
  #           }
  #
  #
  #           exports.handler = async (event, context) => {
  #             setTimeout(async (event, context) => {
  #               console.log("TIMEOUT")
  #               return await send(event, context, "FAILED", {
  #                 body: "Lambda timeouted"
  #               })
  #             }, 1000 * 60) // the value is in milliseconds
  #
  #             if (event.RequestType == "Delete") {
  #               const ecrName = event.ResourceProperties.ECRName;
  #               const region = event.ResourceProperties.Region;
  #
  #
  #               const client = new ECRClient({ region: region })
  #               const imageIds = await getImages(client, ecrName)
  #
  #               if (imageIds.length == 0) {
  #                 return await send(event, context, response.SUCCESS, {
  #                   body: "Nothing to delete"
  #                 })
  #               }
  #               else {
  #                 const deleteRes = await deleteImages(client, ecrName, imageIds)
  #                 if (deleteRes.statusCode != 200) {
  #                   return await send(event, context, response.FAILED, {
  #                     body: "Deletion failed"
  #                   })
  #                 } else {
  #                   return await send(event, context, response.SUCCESS, {
  #                     body: "Deletion completed"
  #                   })
  #                 }
  #               }
  #             } else if (event.RequestType == "Update") {
  #               return await send(event, context, response.SUCCESS, {
  #                 body: "Update completed"
  #               })
  #             } else if (event.RequestType == "Create") {
  #               return await send(event, context, response.SUCCESS, {
  #                 body: "Create completed"
  #               })
  #             }
  #           }
  #
  #
  #       KmsKeyArn: !GetAtt KMSKey.Arn
  #       # WARN: need to created the following role inside the template
  #       Role: arn:aws:iam::861507897222:role/dmitriECRRoleDeleteImages 
  #       Timeout: 60

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        # ArtifactIdentifier: String
        # EncryptionDisabled: Boolean
        # Location: String
        # Name: String
        # NamespaceType: String
        # OverrideArtifactName: Boolean
        # Packaging: String
        # Path: String
        Type: CODEPIPELINE

      # BadgeEnabled: Boolean
      # BuildBatchConfig: 
      #   ProjectBuildBatchConfig
      # Cache: 
      #   ProjectCache
      # ConcurrentBuildLimit: Integer
      # Description: String
      # EncryptionKey: String
      Environment: 
        # Certificate: String
        ComputeType: BUILD_GENERAL1_SMALL
        # EnvironmentVariables: 
        #   - EnvironmentVariable
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0-23.02.16
        # ImagePullCredentialsType: String
        PrivilegedMode: true
        # RegistryCredential: 
        #   RegistryCredential
        Type: LINUX_CONTAINER
      # FileSystemLocations: 
      #   - ProjectFileSystemLocation
      # LogsConfig: 
      #   LogsConfig
      # Name: String
      # QueuedTimeoutInMinutes: Integer
      # ResourceAccessRole: String
      # SecondaryArtifacts: 
      #   - Artifacts
      # SecondarySources: 
      #   - Source
      # SecondarySourceVersions: 
      #   - ProjectSourceVersion
      ServiceRole: arn:aws:iam::861507897222:role/codeBuildServiceRole
      Source: 
        # Auth: 
        #   SourceAuth
        BuildSpec: !Sub |
          version: 0.2
          env:
            secrets-manager:
              GITHUB_TOKEN: "dmitri-GITHUB-Oauth-secrets:GITHUB_TOKEN"
              GITHUB_COMMIT_EMAIL: "dmitri-GITHUB-Oauth-secrets:GITHUB_COMMIT_EMAIL"
              GITHUB_COMMIT_NAME: "dmitri-GITHUB-Oauth-secrets:GITHUB_COMMIT_NAME"
              NEXTAUTH_SECRET: "dmitri-GITHUB-Oauth-secrets:NEXTAUTH_SECRET"
              PASSWORD: "dmitri-GITHUB-Oauth-secrets:PASSWORD"

            variables:
              PATH_TO_CODE: "./code/"
              ECR_REPO: "${pRepoName}-${pBranchName}"
              ECR: 861507897222.dkr.ecr.eu-north-1.amazonaws.com
              AWS_REGION: "eu-north-1"
              GIT_REPO: ${pRepoName}
              GIT_BRANCH: ${pBranchName}
              DNS_NAME: ${pDNSName}

          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws --version
                - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR
                - REPOSITORY_URI=$ECR/$ECR_REPO

            build:
              commands:
                - echo "GITHUB_TOKEN="$GITHUB_TOKEN >> $PATH_TO_CODE.env
                - echo "GITHUB_COMMIT_EMAIL="$GITHUB_COMMIT_EMAIL >> $PATH_TO_CODE.env
                - echo "GITHUB_COMMIT_NAME="$GITHUB_COMMIT_NAME >> $PATH_TO_CODE.env
                - echo "NEXTAUTH_SECRET="$NEXTAUTH_SECRET >> $PATH_TO_CODE.env
                - echo "PASSWORD="$PASSWORD >> $PATH_TO_CODE.env

                - if [ "$GIT_BRANCH" = "main" ]; then echo "NEXT_PUBLIC_SITE_URL="$DNS_NAME >> $PATH_TO_CODE.env; fi
                - if [ "$GIT_BRANCH" = "main" ]; then echo "NEXTAUTH_URL="$DNS_NAME >> $PATH_TO_CODE.env; fi
                - if [ "$GIT_BRANCH" != "main" ]; then echo "NEXT_PUBLIC_SITE_URL="$GIT_BRANCH.$DNS_NAME >> $PATH_TO_CODE.env; fi
                - if [ "$GIT_BRANCH" != "main" ]; then echo "NEXTAUTH_URL="$GIT_BRANCH.$DNS_NAME >> $PATH_TO_CODE.env; fi


                - cat $PATH_TO_CODE.env


                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $ECR_REPO $PATH_TO_CODE
                - docker tag $ECR_REPO:latest $REPOSITORY_URI:latest
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:latest
                - echo Writing image definitions file...
                - printf '[{"name":"dmitri-task-definition-cf","imageUri":"%s"}]' $REPOSITORY_URI:latest> images.json
          artifacts:
            files: images.json




        # BuildStatusConfig: 
        #   BuildStatusConfig
        # GitCloneDepth: Integer
        # GitSubmodulesConfig: 
        #   GitSubmodulesConfig
        # InsecureSsl: Boolean
        # Location: String
        # ReportBuildStatus: Boolean
        # SourceIdentifier: String
        Type: CODEPIPELINE
      # SourceVersion: String
      # Tags: 
      #   - Tag
      # TimeoutInMinutes: Integer
      # Triggers: 
      #   ProjectTriggers
      # Visibility: String
      # VpcConfig: 
      #   VpcConfig


  CodePipeLine:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      RoleArn: arn:aws:iam::861507897222:role/CodePipelineServiceRole
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              RunOrder: 1
              Configuration: 
                ConnectionArn: arn:aws:codestar-connections:eu-north-1:861507897222:connection/3539e571-f68d-4976-924d-214a46cd5fcd
                FullRepositoryId: !Join
                  - "/"
                  - - !Ref pRepoOwner 
                    - !Ref pRepoName
                BranchName: !Ref pBranchName
              Name: SourceAction
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions: 
            - InputArtifacts: 
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              RunOrder: 2
              Configuration: 
                ProjectName: !Ref CodeBuildProject
                # ProjectName: dmitri-build-node-docker
                # PrimarySource: SourceArtifact
              Name: BuildAction
              OutputArtifacts:
                - Name: BuildArtifact
                
        - Name: Deploy
          Actions: 
            - InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              RunOrder: 3
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: images.json
              Name: DeployAction
